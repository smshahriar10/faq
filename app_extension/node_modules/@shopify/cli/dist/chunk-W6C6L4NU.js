import {
  base_command_default
} from "./chunk-5RO6P4KC.js";
import {
  mkdir,
  outputInfo,
  rmdir,
  writeFile
} from "./chunk-3N5TYEOJ.js";
import {
  cwd,
  joinPath
} from "./chunk-M336AND6.js";
import {
  init_cjs_shims
} from "./chunk-BVGYIZ3O.js";

// src/cli/commands/docs/generate.ts
init_cjs_shims();
var docsPath = joinPath(cwd(), "/docs-shopify.dev/commands");
var DocsGenerate = class extends base_command_default {
  static {
    this.description = "Generate CLI commands documentation";
  }
  static {
    this.hidden = true;
  }
  async run() {
    const commands = this.config.commands;
    await rmdir(docsPath);
    await mkdir(docsPath);
    const sortedCommands = commands.sort((ca, cb) => ca.id.length - cb.id.length).filter((command) => !isHidden(command));
    const promises = sortedCommands.flatMap((command) => {
      const commandData = extractCommandData(command);
      return [
        writeCommandFlagInterface(command, commandData),
        writeCommandUsageExampleFile(command, commandData),
        writeCommandDocumentation(command, commandData)
      ];
    });
    await Promise.all(promises);
  }
};
var hiddenTopics = ["commands", "help", "plugins"];
var universalTopics = ["config", "auth"];
function isHidden(command) {
  if (command.hidden) {
    hiddenTopics.push(command.id);
    return true;
  }
  if (command.pluginType === "user")
    return true;
  return hiddenTopics.some((topic) => command.id.startsWith(`${topic}:`));
}
function extractCommandData(command) {
  const commandName = command.id.replace(/[:]/g, " ");
  const fileName = command.id.replace(/[:]/g, "-");
  const interfaceName = command.id.replace(/[:-]/g, "");
  const hasTopic = command.id.includes(":");
  const topic = command.id.split(":")[0];
  const hasFlags = command.flags && Object.keys(command.flags).length > 0;
  return { commandName, fileName, interfaceName, hasTopic, topic, hasFlags };
}
async function writeCommandDocumentation(command, { commandName, fileName, interfaceName, hasTopic, topic, hasFlags }) {
  const flagDoc = `
  {
    title: 'Flags',
    description: 'The following flags are available for the \`${commandName}\` command:',
    type: '${interfaceName}',
  },`;
  const description = command.descriptionWithMarkdown ?? command.description ?? command.summary;
  const previewDescription = command.summary ?? description;
  const category = hasTopic && !universalTopics.includes(topic) ? topic : "Universal commands";
  const string = `// This is an autogenerated file. Don't edit this file manually.
import {ReferenceEntityTemplateSchema} from '@shopify/generate-docs'

const data: ReferenceEntityTemplateSchema = {
  name: '${commandName}',
  description: \`${description?.replace(/`/g, "\\`")}\`,
  overviewPreviewDescription: \`${previewDescription?.replace(/`/g, "\\`")}\`,
  type: 'command',
  isVisualComponent: false,
  defaultExample: {
    codeblock: {
      tabs: [
        {
          title: '${commandName}',
          code: './examples/${fileName}.example.sh',
          language: 'bash',
        },
      ],
      title: '${commandName}',
    },
  },
  definitions: [${hasFlags ? flagDoc : ""}
  ],
  category: '${category}',
  related: [
  ],
}

export default data`;
  await writeFile(`${docsPath}/${fileName}.doc.ts`, string);
  outputInfo(`Generated docs for ${commandName}`);
}
async function writeCommandFlagInterface(command, { fileName, interfaceName }) {
  const flagsDetails = Object.keys(command.flags).map((flagName) => {
    const flag = command.flags[flagName];
    if (!flag)
      return;
    if (flag.hidden)
      return;
    const flagDescription = flag.description || "";
    const char = flag.char ? `-${flag.char}, ` : "";
    const type = flag.type === "option" ? "string" : "''";
    const value = flag.type === "option" ? " <value>" : "";
    const optional = flag.required ? "" : "?";
    const flagContent = `  /**
   * ${flagDescription}
   */
  '${char}--${flagName}${value}'${optional}: ${type}`;
    return flagContent;
  }).filter((str) => str && str?.length > 0).join("\n\n");
  const commandContent = `// This is an autogenerated file. Don't edit this file manually.
export interface ${interfaceName} {
${flagsDetails}
}
`;
  await mkdir(`${docsPath}/interfaces`);
  await writeFile(`${docsPath}/interfaces/${fileName}.interface.ts`, commandContent);
}
async function writeCommandUsageExampleFile(command, { fileName, commandName }) {
  let usage = "";
  const hasFlags = command.flags && Object.keys(command.flags).length > 0;
  if (typeof command.usage === "string") {
    usage = command.usage;
  } else if (Array.isArray(command.usage)) {
    usage = command.usage.join("\n\n");
  } else {
    usage = `shopify ${commandName}${hasFlags ? " [flags]" : ""}`;
  }
  await mkdir(`${docsPath}/examples`);
  await writeFile(`${docsPath}/examples/${fileName}.example.sh`, usage);
}

export {
  DocsGenerate,
  extractCommandData,
  writeCommandDocumentation,
  writeCommandFlagInterface,
  writeCommandUsageExampleFile
};
